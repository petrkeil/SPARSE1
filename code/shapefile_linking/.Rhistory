library(sf)   # library for handling shapefiles
library(rgdal)#
library(raster) # for handling rasters - note that there is a newer "terra"
library(tidyverse)
library(readxl) # for import of .xlsx files
library(ggspatial)
library(gridExtra)
# define PROJ4 string for the two projections that may come handy
WGS84 <- "+proj=longlat +datum=WGS84 +no_defs "
KROVAK <- "+proj=krovak +lat_0=49.5 +lon_0=24.8333333333333 +alpha=30.2881397527778 +k=0.9999 +x_0=0 +y_0=0 +ellps=bessel +towgs84=589,76,480,0,0,0,0 +units=m +no_defs"
# read CZ boundary shapefile
cz <- st_read("../../CZ_border_shapefile/CZE_adm0.shp")
# transform cz boundary from WGS84 to KROVAK
cz <- st_transform(cz, crs=KROVAK)
# read the data shapefile
pls <- st_read("../../SPARSE_shapefiles/SPARSE CZ birds pg.shp",
fid_column_name = "shapefileFID")
# read the points
pts <- st_read("../../SPARSE_shapefiles/SPARSE CZ birds p.shp",
fid_column_name = "shapefileFID")
plot(pts)
plot(lns)
# read the lines
lns <- st_read("../../SPARSE_shapefiles/SPARSE CZ birds l.shp",
fid_column_name = "shapefileFID")
plot(lns)
# plot the shapefiles
fig_sites <- ggplot() +
geom_sf(data = cz) +
geom_sf(data = pls, fill = "black", size = 1.5, colour = "black") +
geom_sf(data = lns, colour = "black", size = 1.5) +
geom_sf(data = pts, colour = "black",  size = 1) +
theme_minimal() +
annotation_scale() + labs(title = "(a)")
fig_sites
# read the .csv from sparse
dat <- read.csv(file="species per FID_count.csv",
fileEncoding="UTF-8-BOM")
sum(duplicated(dat$shapefileFID))
which(duplicated(dat$shapefileFID))
summary(dat)
head(dat)
# keep only polygons (1) and remove points (3) and transects (2)
dat <- dat[dat$siteShapeID == 1, ]
# histogram of area
fig_A_hist <- ggplot(data = dat, aes(x = totalAreaSampledInSquareKilometers)) +
geom_histogram(fill="grey", colour = "black") +
xlab("Area [km^2]") + ylab("Count") +
scale_x_log10() +
theme_minimal() + labs(title = "(b)")
fig_A_hist
# plot the shapefiles
fig_sites <- ggplot() +
geom_sf(data = cz) +
geom_sf(data = pls, fill = "black", size = 1.5, colour = "black") +
geom_sf(data = lns, colour = "black", size = 1.5) +
geom_sf(data = pts, colour = "black",  size = 1) +
theme_minimal() +
annotation_scale() + labs(title = "(a)")
fig_sites
# read the .csv from sparse
dat <- read.csv(file="Q1 static species richness.csv",
fileEncoding="UTF-8-BOM")
sum(duplicated(dat$shapefileFID))
which(duplicated(dat$shapefileFID))
summary(dat)
head(dat)
# keep only polygons (1) and remove points (3) and transects (2)
dat <- dat[dat$siteShapeID == 1, ]
# histogram of area
fig_A_hist <- ggplot(data = dat, aes(x = totalAreaSampledInSquareKilometers)) +
geom_histogram(fill="grey", colour = "black") +
xlab("Area [km^2]") + ylab("Count") +
scale_x_log10() +
theme_minimal() + labs(title = "(b)")
fig_A_hist
# check for duplicated values
sum(duplicated(dat$shapefileFID))
which(duplicated(dat$shapefileFID))
# histogram of species richness
fig_S_hist <- ggplot(data = dat, aes(x = species_perFID)) +
geom_histogram(fill="grey", colour = "black") +
xlab("# of Species") + ylab("Count") +
theme_minimal() + labs(title = "(c)")
fig_S_hist
# histogram of species richness
fig_S_hist <- ggplot(data = dat, aes(x = verbatimIdentificationPerSite_Count)) +
geom_histogram(fill="grey", colour = "black") +
xlab("# of Species") + ylab("Count") +
theme_minimal() + labs(title = "(c)")
fig_S_hist
# check for duplicated values
sum(duplicated(dat$shapefileFID))
which(duplicated(dat$shapefileFID))
# histogram of species richness
fig_S_hist <- ggplot(data = dat, aes(x = verbatimIdentificationPerSite_Count)) +
geom_histogram(fill="grey", colour = "black") +
xlab("# of Species") + ylab("Count") +
theme_minimal() + labs(title = "(c)")
fig_S_hist
# species-area relationship
fig_SAR <- ggplot(data = dat, aes(x = totalAreaSampledInSquareKilometers,
y = species_perFID)) +
geom_point(shape = 1) +
scale_x_log10() +        # x axis is logarithmic
scale_y_log10() +        # y axis is logarithmic
#annotation_logticks() +  # show logarithmic tickmarks
geom_smooth(method=lm, colour = "black") + # show linear regression
xlab("Area [km^2]") + ylab("# of Species") +
theme_minimal() + labs(title = "(d)")
fig_SAR
# species-area relationship
fig_SAR <- ggplot(data = dat, aes(x = totalAreaSampledInSquareKilometers,
y = verbatimIdentificationPerSite_Count)) +
geom_point(shape = 1) +
scale_x_log10() +        # x axis is logarithmic
scale_y_log10() +        # y axis is logarithmic
#annotation_logticks() +  # show logarithmic tickmarks
geom_smooth(method=lm, colour = "black") + # show linear regression
xlab("Area [km^2]") + ylab("# of Species") +
theme_minimal() + labs(title = "(d)")
fig_SAR
png(filename="Fig2.png", res= 250, width = 2400, height= 1600)
grid.arrange(fig_sites, fig_A_hist, fig_S_hist, fig_SAR)
dev.off()
# plot the shapefiles
fig_sites <- ggplot() +
geom_sf(data = cz) +
geom_sf(data = pls, fill = "black", size = 1.5, colour = "black") +
geom_sf(data = lns, colour = "black", size = 1.5) +
geom_sf(data = pts, colour = "black",  size = 1) +
theme_minimal() +
annotation_scale() + labs(title = "(a)")
fig_sites
# plot the shapefiles
fig_sites <- ggplot() +
geom_sf(data = cz) +
geom_sf(data = pls, fill = "black", size = 3, colour = "black") +
geom_sf(data = lns, colour = "black", size = 1.5) +
geom_sf(data = pts, colour = "black",  size = 1) +
theme_minimal() +
annotation_scale() + labs(title = "(a)")
fig_sites
# plot the shapefiles
fig_sites <- ggplot() +
geom_sf(data = cz) +
geom_sf(data = pls, fill = "black", size = 1.5, colour = "black") +
geom_sf(data = lns, colour = "black", size = 1.5) +
geom_sf(data = pts, colour = "black",  size = 1) +
theme_minimal() +
annotation_scale() + labs(title = "(a)")
fig_sites
# plot the shapefiles
fig_sites <- ggplot() +
geom_sf(data = cz, size = 1.5,) +
geom_sf(data = pls, fill = "black", size = 1.5, colour = "black") +
geom_sf(data = lns, colour = "black", size = 1.5) +
geom_sf(data = pts, colour = "black",  size = 1) +
theme_minimal() +
annotation_scale() + labs(title = "(a)")
fig_sites
# plot the shapefiles
fig_sites <- ggplot() +
geom_sf(data = cz, size = 5,) +
geom_sf(data = pls, fill = "black", size = 1.5, colour = "black") +
geom_sf(data = lns, colour = "black", size = 1.5) +
geom_sf(data = pts, colour = "black",  size = 1) +
theme_minimal() +
annotation_scale() + labs(title = "(a)")
fig_sites
# plot the shapefiles
fig_sites <- ggplot() +
geom_sf(data = cz, size = 1.5,) +
geom_sf(data = pls, fill = "black", size = 1.5, colour = "black") +
geom_sf(data = lns, colour = "black", size = 1.5) +
geom_sf(data = pts, colour = "black",  size = 1) +
theme_minimal() +
annotation_scale() + labs(title = "(a)")
fig_sites
# read the .csv from sparse
dat <- read.csv(file="Q1 static species richness.csv",
fileEncoding="UTF-8-BOM")
# plot the shapefiles
fig_sites <- ggplot() +
geom_sf(data = cz, size = 10,) +
geom_sf(data = pls, fill = "black", size = 1.5, colour = "black") +
geom_sf(data = lns, colour = "black", size = 1.5) +
geom_sf(data = pts, colour = "black",  size = 1) +
theme_minimal() +
annotation_scale() + labs(title = "(a)")
fig_sites
# plot the shapefiles
fig_sites <- ggplot() +
geom_sf(data = cz, aes(size = 10)) +
geom_sf(data = pls, fill = "black", size = 1.5, colour = "black") +
geom_sf(data = lns, colour = "black", size = 1.5) +
geom_sf(data = pts, colour = "black",  size = 1) +
theme_minimal() +
annotation_scale() + labs(title = "(a)")
fig_sites
# plot the shapefiles
fig_sites <- ggplot() +
geom_sf(data = cz, size = 10) +
geom_sf(data = pls, fill = "black", size = 1.5, colour = "black") +
geom_sf(data = lns, colour = "black", size = 1.5) +
geom_sf(data = pts, colour = "black",  size = 1) +
theme_minimal() +
annotation_scale() + labs(title = "(a)")
fig_sites
# plot the shapefiles
fig_sites <- ggplot() +
geom_sf(data = cz, size = 1) +
geom_sf(data = pls, fill = "black", size = 1.5, colour = "black") +
geom_sf(data = lns, colour = "black", size = 1.5) +
geom_sf(data = pts, colour = "black",  size = 1) +
theme_minimal() +
annotation_scale() + labs(title = "(a)")
fig_sites
library(sf)   # library for handling shapefiles
library(rgdal)#
library(raster) # for handling rasters - note that there is a newer "terra"
library(tidyverse)
library(readxl) # for import of .xlsx files
library(ggspatial)
library(gridExtra)
# plot the shapefiles
fig_sites <- ggplot() +
geom_sf(data = cz, size = 1) +
geom_sf(data = pls, fill = "black", size = 1.5, colour = "black") +
geom_sf(data = lns, colour = "black", size = 1.5) +
geom_sf(data = pts, colour = "black",  size = 1) +
theme_minimal() +
annotation_scale() + labs(title = "(a)")
fig_sites
# plot the shapefiles
fig_sites <- ggplot() +
geom_sf(data = cz, size = 1) +
geom_sf(data = pls, fill = "black", size = 1.5, colour = "black") +
geom_sf(data = lns, colour = "black", size = 4) +
geom_sf(data = pts, colour = "black",  size = 1) +
theme_minimal() +
annotation_scale() + labs(title = "(a)")
fig_sites
# plot the shapefiles
fig_sites <- ggplot() +
geom_sf(data = cz, size = 1) +
geom_sf(data = pls, fill = "black", size = 1.5, colour = "black") +
geom_sf(data = lns, colour = "black", size = 1.5) +
geom_sf(data = pts, colour = "black",  size = 1) +
theme_minimal() +
annotation_scale() + labs(title = "(a)")
fig_sites
?geom_sf
install.packages(c("cachem", "checkmate", "dplyr", "DT", "evaluate", "fontawesome", "fs", "gargle", "ggplot2", "ggspatial", "httpuv", "httr", "later", "lme4", "markdown", "processx", "ps", "rcdd", "rgdal", "rlang", "s2", "sass", "StanHeaders", "terra", "testthat", "tinytex", "tzdb", "units", "vctrs", "viridisLite", "vroom", "waldo", "wk", "xfun", "xml2"))
install.packages(c("cachem", "checkmate", "dplyr", "DT", "evaluate", "fontawesome", "fs", "gargle", "ggplot2", "ggspatial", "httpuv", "httr", "later", "lme4", "markdown", "processx", "ps", "rcdd", "rgdal", "rlang", "s2", "sass", "StanHeaders", "terra", "testthat", "tinytex", "tzdb", "units", "vctrs", "viridisLite", "vroom", "waldo", "wk", "xfun", "xml2"))
install.packages(c("cachem", "checkmate", "dplyr", "DT", "evaluate", "fontawesome", "fs", "gargle", "ggplot2", "ggspatial", "httpuv", "httr", "later", "lme4", "markdown", "processx", "ps", "rcdd", "rgdal", "rlang", "s2", "sass", "StanHeaders", "terra", "testthat", "tinytex", "tzdb", "units", "vctrs", "viridisLite", "vroom", "waldo", "wk", "xfun", "xml2"))
install.packages(c("cachem", "checkmate", "dplyr", "DT", "evaluate", "fontawesome", "fs", "gargle", "ggplot2", "ggspatial", "httpuv", "httr", "later", "lme4", "markdown", "processx", "ps", "rcdd", "rgdal", "rlang", "s2", "sass", "StanHeaders", "terra", "testthat", "tinytex", "tzdb", "units", "vctrs", "viridisLite", "vroom", "waldo", "wk", "xfun", "xml2"))
install.packages(c("cachem", "checkmate", "dplyr", "DT", "evaluate", "fontawesome", "fs", "gargle", "ggplot2", "ggspatial", "httpuv", "httr", "later", "lme4", "markdown", "processx", "ps", "rcdd", "rgdal", "rlang", "s2", "sass", "StanHeaders", "terra", "testthat", "tinytex", "tzdb", "units", "vctrs", "viridisLite", "vroom", "waldo", "wk", "xfun", "xml2"))
install.packages(c("cachem", "checkmate", "dplyr", "DT", "evaluate", "fontawesome", "fs", "gargle", "ggplot2", "ggspatial", "httpuv", "httr", "later", "lme4", "markdown", "processx", "ps", "rcdd", "rgdal", "rlang", "s2", "sass", "StanHeaders", "terra", "testthat", "tinytex", "tzdb", "units", "vctrs", "viridisLite", "vroom", "waldo", "wk", "xfun", "xml2"))
